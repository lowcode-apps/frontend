{"version":3,"file":"static/js/77.55077f22.chunk.js","mappings":"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","sources":["pages/Map/components/CustomTile.tsx","pages/Map/components/Placeholder.tsx","pages/Map/subpages/DraggablePin.tsx","../node_modules/react-leaflet/lib/Marker.js","../node_modules/react-leaflet/lib/Popup.js"],"sourcesContent":["import React from 'react';\nimport { MapContainer, TileLayer, useMapEvent } from 'react-leaflet';\n\nconst CustomTile = () => <TileLayer\n    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap by Jagan </a> contributors'\n    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n/>\n\n\nexport default CustomTile;","import React from \"react\";\nfunction MapPlaceholder() {\n  return (\n    <p>\n      Map by Jagan.{' '}\n      <noscript>You need to enable JavaScript to see this map.</noscript>\n    </p>\n  )\n}\n\nexport default MapPlaceholder;","import React, { useState, useRef, useMemo, useCallback } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport MapPlaceholder from '../components/Placeholder';\nimport CustomTile from '../components/CustomTile';\n\nconst center = {\n    lat: 51.505,\n    lng: -0.09,\n};\n\nfunction DraggableMarker() {\n    const [draggable, setDraggable] = useState(false);\n    const [position, setPosition] = useState(center);\n    const markerRef = useRef(null);\n\n    const eventHandlers = useMemo(\n        () => ({\n            dragend() {\n                const marker: any = markerRef.current;\n                if (marker != null) {\n                    setPosition(marker.getLatLng());\n                }\n            },\n        }),\n        [],\n    );\n\n    const toggleDraggable = useCallback(() => {\n        setDraggable((d) => !d);\n    }, []);\n\n    return (\n        <Marker\n            draggable={draggable}\n            eventHandlers={eventHandlers}\n            position={position}\n            ref={markerRef}\n        >\n            <Popup minWidth={90}>\n                <span onClick={toggleDraggable}>\n                    {draggable\n                        ? 'Marker is draggable'\n                        : 'Click here to make marker draggable'}\n                </span>\n            </Popup>\n        </Marker>\n    );\n}\n\nconst DraggablePin = () => {\n    return (\n        <MapContainer center={center} zoom={13} scrollWheelZoom={false} placeholder={<MapPlaceholder />}\n        >\n            <CustomTile />\n\n            <DraggableMarker />\n        </MapContainer>\n    );\n};\n\nexport default DraggablePin;\n","import { createElementObject, createLayerComponent, extendContext } from '@react-leaflet/core';\nimport { Marker as LeafletMarker } from 'leaflet';\nexport const Marker = createLayerComponent(function createMarker({ position , ...options }, ctx) {\n    const marker = new LeafletMarker(position, options);\n    return createElementObject(marker, extendContext(ctx, {\n        overlayContainer: marker\n    }));\n}, function updateMarker(marker, props, prevProps) {\n    if (props.position !== prevProps.position) {\n        marker.setLatLng(props.position);\n    }\n    if (props.icon != null && props.icon !== prevProps.icon) {\n        marker.setIcon(props.icon);\n    }\n    if (props.zIndexOffset != null && props.zIndexOffset !== prevProps.zIndexOffset) {\n        marker.setZIndexOffset(props.zIndexOffset);\n    }\n    if (props.opacity != null && props.opacity !== prevProps.opacity) {\n        marker.setOpacity(props.opacity);\n    }\n    if (marker.dragging != null && props.draggable !== prevProps.draggable) {\n        if (props.draggable === true) {\n            marker.dragging.enable();\n        } else {\n            marker.dragging.disable();\n        }\n    }\n});\n","import { createElementObject, createOverlayComponent } from '@react-leaflet/core';\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Popup = createOverlayComponent(function createPopup(props, context) {\n    const popup = new LeafletPopup(props, context.overlayContainer);\n    return createElementObject(popup, context);\n}, function usePopupLifecycle(element, context, { position  }, setOpen) {\n    useEffect(function addPopup() {\n        const { instance  } = element;\n        function onPopupOpen(event) {\n            if (event.popup === instance) {\n                instance.update();\n                setOpen(true);\n            }\n        }\n        function onPopupClose(event) {\n            if (event.popup === instance) {\n                setOpen(false);\n            }\n        }\n        context.map.on({\n            popupopen: onPopupOpen,\n            popupclose: onPopupClose\n        });\n        if (context.overlayContainer == null) {\n            // Attach to a Map\n            if (position != null) {\n                instance.setLatLng(position);\n            }\n            instance.openOn(context.map);\n        } else {\n            // Attach to container component\n            context.overlayContainer.bindPopup(instance);\n        }\n        return function removePopup() {\n            context.map.off({\n                popupopen: onPopupOpen,\n                popupclose: onPopupClose\n            });\n            context.overlayContainer?.unbindPopup();\n            context.map.removeLayer(instance);\n        };\n    }, [\n        element,\n        context,\n        setOpen,\n        position\n    ]);\n});\n"],"names":["CustomTile","_jsx","TileLayer","attribution","url","_jsxs","children","center","lat","lng","DraggableMarker","draggable","setDraggable","useState","position","setPosition","markerRef","useRef","eventHandlers","useMemo","dragend","marker","current","getLatLng","toggleDraggable","useCallback","d","Marker","ref","Popup","minWidth","onClick","DraggablePin","MapContainer","zoom","scrollWheelZoom","placeholder","MapPlaceholder","createLayerComponent","_ref","ctx","options","LeafletMarker","createElementObject","extendContext","overlayContainer","props","prevProps","setLatLng","icon","setIcon","zIndexOffset","setZIndexOffset","opacity","setOpacity","dragging","enable","disable","createOverlayComponent","context","popup","LeafletPopup","element","setOpen","useEffect","instance","onPopupOpen","event","update","onPopupClose","map","on","popupopen","popupclose","openOn","bindPopup","_context$overlayConta","off","unbindPopup","removeLayer"],"sourceRoot":""}