{"version":3,"file":"static/js/425.f6c8a998.chunk.js","mappings":"sJAGA,MAMA,EANmBA,KAAMC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAC/BC,YAAY,kGACZC,IAAI,sD,2DCKR,QATA,WACE,OACEC,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,gBACa,KACdL,EAAAA,EAAAA,KAAA,YAAAK,SAAU,qDAGhB,C,iICHA,MAAMC,EAAmB,CACrB,CAAC,QAAS,MACV,CAAC,OAAQ,OAGPC,EAAmB,CACrB,CAAC,QAAS,OACV,CAAC,OAAQ,QAGPC,EAAW,CAAEC,MAAO,OACpBC,EAAa,CAAED,MAAO,SAE5B,SAASE,IACL,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,UAASP,GAC/BQ,GAAMC,EAAAA,EAAAA,MAENC,GAAgBC,EAAAA,EAAAA,UAClB,MACIC,KAAAA,GACIN,EAAUP,GACVS,EAAIK,UAAUd,EAClB,KAEJ,CAACS,IAECM,GAAgBH,EAAAA,EAAAA,UAClB,MACIC,KAAAA,GACIN,EAAUN,GACVQ,EAAIK,UAAUb,EAClB,KAEJ,CAACQ,IAGL,OACIX,EAAAA,EAAAA,MAAAkB,EAAAA,SAAA,CAAAjB,SAAA,EACIL,EAAAA,EAAAA,KAACuB,EAAAA,EAAS,CACNX,OAAQL,EACRiB,cAAeH,EACfI,YAAab,IAAWL,EAAcC,EAAWE,KAErDV,EAAAA,EAAAA,KAACuB,EAAAA,EAAS,CACNX,OAAQN,EACRkB,cAAeP,EACfQ,YAAab,IAAWN,EAAcE,EAAWE,MAIjE,CAEA,MAUA,EAVkBgB,KAEVtB,EAAAA,EAAAA,MAACuB,EAAAA,EAAY,CAACf,OAAQL,EAAaqB,iBAAiB,EAAOC,aAAa7B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAc,IAAIzB,SAAA,EACvFL,EAAAA,EAAAA,KAACD,EAAAA,EAAU,KAEXC,EAAAA,EAAAA,KAACW,EAAmB,M,mFC5DzB,MAAMY,GAAYQ,EAAAA,EAAAA,KAAoB,SAAwBC,EAA0BC,GAAK,IAA9B,OAAErB,KAAYsB,GAASF,EACzF,MAAMG,EAAY,IAAIC,EAAAA,UAAiBxB,EAAQsB,GAC/C,OAAOG,EAAAA,EAAAA,GAAoBF,GAAWG,EAAAA,EAAAA,IAAcL,EAAK,CACrDM,iBAAkBJ,IAE1B,IAAG,SAAyBK,EAAOC,EAAOC,GAClCD,EAAM7B,SAAW8B,EAAU9B,QAC3B4B,EAAM3B,UAAU4B,EAAM7B,OAE9B,G,gFCTO,SAASI,IACZ,OAAO2B,EAAAA,EAAAA,MAAoB5B,GAC/B,CACO,SAAS6B,EAAYC,EAAMC,GAC9B,MAAM/B,EAAMC,IAaZ,OAZA+B,EAAAA,EAAAA,YAAU,WAGN,OADAhC,EAAIiC,GAAGH,EAAMC,GACN,WAEH/B,EAAIkC,IAAIJ,EAAMC,EAClB,CACJ,GAAG,CACC/B,EACA8B,EACAC,IAEG/B,CACX,CACO,SAASmC,EAAaC,GACzB,MAAMpC,EAAMC,IAUZ,OATA+B,EAAAA,EAAAA,YAAU,WAEN,OADAhC,EAAIiC,GAAGG,GACA,WACHpC,EAAIkC,IAAIE,EACZ,CACJ,GAAG,CACCpC,EACAoC,IAEGpC,CACX,C","sources":["pages/Map/components/CustomTile.tsx","pages/Map/components/Placeholder.tsx","pages/Map/subpages/ViewBound.tsx","../node_modules/react-leaflet/lib/Rectangle.js","../node_modules/react-leaflet/lib/hooks.js"],"sourcesContent":["import React from 'react';\nimport { MapContainer, TileLayer, useMapEvent } from 'react-leaflet';\n\nconst CustomTile = () => <TileLayer\n    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap by Jagan </a> contributors'\n    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n/>\n\n\nexport default CustomTile;","import React from \"react\";\nfunction MapPlaceholder() {\n  return (\n    <p>\n      Map by Jagan.{' '}\n      <noscript>You need to enable JavaScript to see this map.</noscript>\n    </p>\n  )\n}\n\nexport default MapPlaceholder;","import React, { useState, useMemo } from 'react';\nimport { MapContainer, TileLayer, Rectangle, useMap } from 'react-leaflet';\nimport MapPlaceholder from '../components/Placeholder';\nimport CustomTile from '../components/CustomTile';\n\nconst innerBounds: any = [\n    [49.505, -2.09],\n    [53.505, 2.09],\n];\n\nconst outerBounds: any = [\n    [50.505, -29.09],\n    [52.505, 29.09],\n];\n\nconst redColor = { color: 'red' };\nconst whiteColor = { color: 'white' };\n\nfunction SetBoundsRectangles() {\n    const [bounds, setBounds] = useState(outerBounds);\n    const map = useMap();\n\n    const innerHandlers = useMemo(\n        () => ({\n            click() {\n                setBounds(innerBounds);\n                map.fitBounds(innerBounds);\n            },\n        }),\n        [map]\n    );\n    const outerHandlers = useMemo(\n        () => ({\n            click() {\n                setBounds(outerBounds);\n                map.fitBounds(outerBounds);\n            },\n        }),\n        [map]\n    );\n\n    return (\n        <>\n            <Rectangle\n                bounds={outerBounds}\n                eventHandlers={outerHandlers}\n                pathOptions={bounds === outerBounds ? redColor : whiteColor}\n            />\n            <Rectangle\n                bounds={innerBounds}\n                eventHandlers={innerHandlers}\n                pathOptions={bounds === innerBounds ? redColor : whiteColor}\n            />\n        </>\n    );\n}\n\nconst ViewBound = () => {\n    return (\n        <MapContainer bounds={outerBounds} scrollWheelZoom={false} placeholder={<MapPlaceholder />}    >\n            <CustomTile />\n\n            <SetBoundsRectangles />\n        </MapContainer>\n    );\n};\n\nexport default ViewBound;\n","import { createElementObject, createPathComponent, extendContext } from '@react-leaflet/core';\nimport { Rectangle as LeafletRectangle } from 'leaflet';\nexport const Rectangle = createPathComponent(function createRectangle({ bounds , ...options }, ctx) {\n    const rectangle = new LeafletRectangle(bounds, options);\n    return createElementObject(rectangle, extendContext(ctx, {\n        overlayContainer: rectangle\n    }));\n}, function updateRectangle(layer, props, prevProps) {\n    if (props.bounds !== prevProps.bounds) {\n        layer.setBounds(props.bounds);\n    }\n});\n","import { useLeafletContext } from '@react-leaflet/core';\nimport { useEffect } from 'react';\nexport function useMap() {\n    return useLeafletContext().map;\n}\nexport function useMapEvent(type, handler) {\n    const map = useMap();\n    useEffect(function addMapEventHandler() {\n        // @ts-ignore event type\n        map.on(type, handler);\n        return function removeMapEventHandler() {\n            // @ts-ignore event type\n            map.off(type, handler);\n        };\n    }, [\n        map,\n        type,\n        handler\n    ]);\n    return map;\n}\nexport function useMapEvents(handlers) {\n    const map = useMap();\n    useEffect(function addMapEventHandlers() {\n        map.on(handlers);\n        return function removeMapEventHandlers() {\n            map.off(handlers);\n        };\n    }, [\n        map,\n        handlers\n    ]);\n    return map;\n}\n"],"names":["CustomTile","_jsx","TileLayer","attribution","url","_jsxs","children","innerBounds","outerBounds","redColor","color","whiteColor","SetBoundsRectangles","bounds","setBounds","useState","map","useMap","innerHandlers","useMemo","click","fitBounds","outerHandlers","_Fragment","Rectangle","eventHandlers","pathOptions","ViewBound","MapContainer","scrollWheelZoom","placeholder","MapPlaceholder","createPathComponent","_ref","ctx","options","rectangle","LeafletRectangle","createElementObject","extendContext","overlayContainer","layer","props","prevProps","useLeafletContext","useMapEvent","type","handler","useEffect","on","off","useMapEvents","handlers"],"sourceRoot":""}