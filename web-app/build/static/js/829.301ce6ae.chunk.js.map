{"version":3,"file":"static/js/829.301ce6ae.chunk.js","mappings":"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","sources":["pages/Map/components/CustomTile.tsx","pages/Map/components/Placeholder.tsx","../node_modules/react-leaflet/lib/Circle.js","../node_modules/react-leaflet/lib/CircleMarker.js","../node_modules/react-leaflet/lib/Polygon.js","pages/Map/subpages/SelectedGrid.tsx","../node_modules/@react-leaflet/core/lib/circle.js","../node_modules/react-leaflet/lib/Polyline.js","../node_modules/react-leaflet/lib/Popup.js","../node_modules/react-leaflet/lib/Rectangle.js"],"sourcesContent":["import React from 'react';\nimport { MapContainer, TileLayer, useMapEvent } from 'react-leaflet';\n\nconst CustomTile = () => <TileLayer\n    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap by Jagan </a> contributors'\n    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n/>\n\n\nexport default CustomTile;","import React from \"react\";\nfunction MapPlaceholder() {\n  return (\n    <p>\n      Map by Jagan.{' '}\n      <noscript>You need to enable JavaScript to see this map.</noscript>\n    </p>\n  )\n}\n\nexport default MapPlaceholder;","import { createElementObject, createPathComponent, extendContext, updateCircle } from '@react-leaflet/core';\nimport { Circle as LeafletCircle } from 'leaflet';\nexport const Circle = createPathComponent(function createCircle({ center , children: _c , ...options }, ctx) {\n    const circle = new LeafletCircle(center, options);\n    return createElementObject(circle, extendContext(ctx, {\n        overlayContainer: circle\n    }));\n}, updateCircle);\n","import { createElementObject, createPathComponent, extendContext, updateCircle } from '@react-leaflet/core';\nimport { CircleMarker as LeafletCircleMarker } from 'leaflet';\nexport const CircleMarker = createPathComponent(function createCircleMarker({ center , children: _c , ...options }, ctx) {\n    const marker = new LeafletCircleMarker(center, options);\n    return createElementObject(marker, extendContext(ctx, {\n        overlayContainer: marker\n    }));\n}, updateCircle);\n","import { createElementObject, createPathComponent, extendContext } from '@react-leaflet/core';\nimport { Polygon as LeafletPolygon } from 'leaflet';\nexport const Polygon = createPathComponent(function createPolygon({ positions , ...options }, ctx) {\n    const polygon = new LeafletPolygon(positions, options);\n    return createElementObject(polygon, extendContext(ctx, {\n        overlayContainer: polygon\n    }));\n}, function updatePolygon(layer, props, prevProps) {\n    if (props.positions !== prevProps.positions) {\n        layer.setLatLngs(props.positions);\n    }\n});\n","import React from 'react';\nimport {\n  MapContainer,\n  TileLayer,\n  Circle,\n  CircleMarker,\n  Polyline,\n  Polygon,\n  Rectangle,\n  Popup,\n} from 'react-leaflet';\nimport MapPlaceholder from '../components/Placeholder';\nimport CustomTile from '../components/CustomTile';\n\ninterface AppProps { }\n\nconst SelectedGrid = () => {\n\n  const center: [number, number] = [13.319705, 80.192496];\n\n  const polyline: [number, number][] = [\n    [13.319705, 80.192496],\n    [13.32, 80.19],\n    [13.32, 80.18],\n  ];\n\n  const multiPolyline: [number, number][][] = [\n    [\n      [13.32, 80.19],\n      [13.32, 80.18],\n      [13.33, 80.18],\n    ],\n    [\n      [13.32, 80.2],\n      [13.32, 80.21],\n      [13.33, 80.21],\n    ],\n  ];\n\n  const polygon: [number, number][] = [\n    [13.325, 80.192496],\n    [13.33, 80.19],\n    [13.33, 80.18],\n  ];\n\n  const multiPolygon: any = [\n    [\n      [13.32, 80.18],\n      [13.32, 80.17],\n      [13.34, 80.17],\n    ],\n    [\n      [13.32, 80.2],\n      [13.32, 80.22],\n      [13.34, 80.22],\n    ],\n  ];\n\n  const rectangle: [number, number][] = [\n    [13.31, 80.19],\n    [13.32, 80.21],\n  ];\n\n\n  const fillBlueOptions = { fillColor: 'blue' };\n  const blackOptions = { color: 'black' };\n  const limeOptions = { color: 'lime' };\n  const purpleOptions = { color: 'purple' };\n  const redOptions = { color: 'red' };\n\n  return (\n    <MapContainer center={center} zoom={13} scrollWheelZoom={false} placeholder={<MapPlaceholder />}\n    >\n      <CustomTile />\n\n      <Circle center={center} pathOptions={fillBlueOptions} radius={200} />\n      <CircleMarker center={[51.51, -0.12]} pathOptions={redOptions} radius={20}>\n        <Popup>Popup in CircleMarker</Popup>\n      </CircleMarker>\n      <Polyline pathOptions={limeOptions} positions={polyline} />\n      <Polyline pathOptions={limeOptions} positions={multiPolyline} />\n      <Polygon pathOptions={purpleOptions} positions={polygon} />\n      <Polygon pathOptions={purpleOptions} positions={multiPolygon} />\n      <Rectangle bounds={rectangle} pathOptions={blackOptions} />\n    </MapContainer>\n  );\n};\n\nexport default SelectedGrid;\n","export function updateCircle(layer, props, prevProps) {\n    if (props.center !== prevProps.center) {\n        layer.setLatLng(props.center);\n    }\n    if (props.radius != null && props.radius !== prevProps.radius) {\n        layer.setRadius(props.radius);\n    }\n}\n","import { createElementObject, createPathComponent, extendContext } from '@react-leaflet/core';\nimport { Polyline as LeafletPolyline } from 'leaflet';\nexport const Polyline = createPathComponent(function createPolyline({ positions , ...options }, ctx) {\n    const polyline = new LeafletPolyline(positions, options);\n    return createElementObject(polyline, extendContext(ctx, {\n        overlayContainer: polyline\n    }));\n}, function updatePolyline(layer, props, prevProps) {\n    if (props.positions !== prevProps.positions) {\n        layer.setLatLngs(props.positions);\n    }\n});\n","import { createElementObject, createOverlayComponent } from '@react-leaflet/core';\nimport { Popup as LeafletPopup } from 'leaflet';\nimport { useEffect } from 'react';\nexport const Popup = createOverlayComponent(function createPopup(props, context) {\n    const popup = new LeafletPopup(props, context.overlayContainer);\n    return createElementObject(popup, context);\n}, function usePopupLifecycle(element, context, { position  }, setOpen) {\n    useEffect(function addPopup() {\n        const { instance  } = element;\n        function onPopupOpen(event) {\n            if (event.popup === instance) {\n                instance.update();\n                setOpen(true);\n            }\n        }\n        function onPopupClose(event) {\n            if (event.popup === instance) {\n                setOpen(false);\n            }\n        }\n        context.map.on({\n            popupopen: onPopupOpen,\n            popupclose: onPopupClose\n        });\n        if (context.overlayContainer == null) {\n            // Attach to a Map\n            if (position != null) {\n                instance.setLatLng(position);\n            }\n            instance.openOn(context.map);\n        } else {\n            // Attach to container component\n            context.overlayContainer.bindPopup(instance);\n        }\n        return function removePopup() {\n            context.map.off({\n                popupopen: onPopupOpen,\n                popupclose: onPopupClose\n            });\n            context.overlayContainer?.unbindPopup();\n            context.map.removeLayer(instance);\n        };\n    }, [\n        element,\n        context,\n        setOpen,\n        position\n    ]);\n});\n","import { createElementObject, createPathComponent, extendContext } from '@react-leaflet/core';\nimport { Rectangle as LeafletRectangle } from 'leaflet';\nexport const Rectangle = createPathComponent(function createRectangle({ bounds , ...options }, ctx) {\n    const rectangle = new LeafletRectangle(bounds, options);\n    return createElementObject(rectangle, extendContext(ctx, {\n        overlayContainer: rectangle\n    }));\n}, function updateRectangle(layer, props, prevProps) {\n    if (props.bounds !== prevProps.bounds) {\n        layer.setBounds(props.bounds);\n    }\n});\n"],"names":["CustomTile","_jsx","TileLayer","attribution","url","_jsxs","children","Circle","createPathComponent","_ref","ctx","center","_c","options","circle","LeafletCircle","createElementObject","extendContext","overlayContainer","updateCircle","CircleMarker","marker","LeafletCircleMarker","Polygon","positions","polygon","LeafletPolygon","layer","props","prevProps","setLatLngs","SelectedGrid","limeOptions","color","purpleOptions","MapContainer","zoom","scrollWheelZoom","placeholder","MapPlaceholder","pathOptions","fillColor","radius","Popup","Polyline","Rectangle","bounds","setLatLng","setRadius","polyline","LeafletPolyline","createOverlayComponent","context","popup","LeafletPopup","element","setOpen","position","useEffect","instance","onPopupOpen","event","update","onPopupClose","map","on","popupopen","popupclose","openOn","bindPopup","_context$overlayConta","off","unbindPopup","removeLayer","rectangle","LeafletRectangle","setBounds"],"sourceRoot":""}