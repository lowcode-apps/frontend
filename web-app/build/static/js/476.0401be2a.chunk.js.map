{"version":3,"file":"static/js/476.0401be2a.chunk.js","mappings":"sJAGA,MAMA,EANmBA,KAAMC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAC/BC,YAAY,kGACZC,IAAI,sD,2DCKR,QATA,WACE,OACEC,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,gBACa,KACdL,EAAAA,EAAAA,KAAA,YAAAK,SAAU,qDAGhB,C,sHCEA,SAASC,EAAcC,GAAuC,IAAtC,WAAEC,GAAiCD,EACvD,MAAME,GAAMC,EAAAA,EAAAA,IAAY,SAAUC,IAC9BF,EAAIG,QAAQD,EAAEE,OAAQJ,EAAIK,UAAW,CACjCC,QAASP,EAAWQ,UAAW,GACjC,IAGN,OAAO,IACX,CA4BA,QA1BA,WACI,MAAMR,GAAaS,EAAAA,EAAAA,SAAO,GAE1B,OACIb,EAAAA,EAAAA,MAAAc,EAAAA,SAAA,CAAAb,SAAA,EACIL,EAAAA,EAAAA,KAAA,KAAAK,UACID,EAAAA,EAAAA,MAAA,SAAAC,SAAA,EACIL,EAAAA,EAAAA,KAAA,SACImB,KAAK,WACLC,SAAUA,KACNZ,EAAWQ,SAAWR,EAAWQ,OAAO,IAE9C,wBAIVZ,EAAAA,EAAAA,MAACiB,EAAAA,EAAY,CAACC,OAAQ,CAAC,QAAS,KAAOC,KAAM,GAAIC,iBAAiB,EAAOC,aAAazB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAc,IAAIrB,SAAA,EAErGL,EAAAA,EAAAA,KAACD,EAAAA,EAAU,KAEXC,EAAAA,EAAAA,KAACM,EAAc,CAACE,WAAYA,SAI5C,C,gFC1CO,SAASmB,IACZ,OAAOC,EAAAA,EAAAA,MAAoBnB,GAC/B,CACO,SAASC,EAAYS,EAAMU,GAC9B,MAAMpB,EAAMkB,IAaZ,OAZAG,EAAAA,EAAAA,YAAU,WAGN,OADArB,EAAIsB,GAAGZ,EAAMU,GACN,WAEHpB,EAAIuB,IAAIb,EAAMU,EAClB,CACJ,GAAG,CACCpB,EACAU,EACAU,IAEGpB,CACX,CACO,SAASwB,EAAaC,GACzB,MAAMzB,EAAMkB,IAUZ,OATAG,EAAAA,EAAAA,YAAU,WAEN,OADArB,EAAIsB,GAAGG,GACA,WACHzB,EAAIuB,IAAIE,EACZ,CACJ,GAAG,CACCzB,EACAyB,IAEGzB,CACX,C","sources":["pages/Map/components/CustomTile.tsx","pages/Map/components/Placeholder.tsx","pages/Map/subpages/Animate.tsx","../node_modules/react-leaflet/lib/hooks.js"],"sourcesContent":["import React from 'react';\nimport { MapContainer, TileLayer, useMapEvent } from 'react-leaflet';\n\nconst CustomTile = () => <TileLayer\n    attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap by Jagan </a> contributors'\n    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n/>\n\n\nexport default CustomTile;","import React from \"react\";\nfunction MapPlaceholder() {\n  return (\n    <p>\n      Map by Jagan.{' '}\n      <noscript>You need to enable JavaScript to see this map.</noscript>\n    </p>\n  )\n}\n\nexport default MapPlaceholder;","import React, { useRef } from 'react';\nimport { MapContainer, TileLayer, useMapEvent } from 'react-leaflet';\nimport MapPlaceholder from '../components/Placeholder';\nimport CustomTile from '../components/CustomTile';\n\n\ninterface SetViewOnClickProps {\n    animateRef: React.MutableRefObject<boolean>;\n}\n\nfunction SetViewOnClick({ animateRef }: SetViewOnClickProps) {\n    const map = useMapEvent('click', (e) => {\n        map.setView(e.latlng, map.getZoom(), {\n            animate: animateRef.current || false,\n        });\n    });\n\n    return null;\n}\n\nfunction Animate() {\n    const animateRef = useRef(false);\n\n    return (\n        <>\n            <p>\n                <label>\n                    <input\n                        type=\"checkbox\"\n                        onChange={() => {\n                            animateRef.current = !animateRef.current;\n                        }}\n                    />\n                    Animate panning\n                </label>\n            </p>\n            <MapContainer center={[51.505, -0.09]} zoom={13} scrollWheelZoom={false} placeholder={<MapPlaceholder />}\n            >\n                <CustomTile />\n\n                <SetViewOnClick animateRef={animateRef} />\n            </MapContainer>\n        </>\n    );\n}\n\nexport default Animate;\n","import { useLeafletContext } from '@react-leaflet/core';\nimport { useEffect } from 'react';\nexport function useMap() {\n    return useLeafletContext().map;\n}\nexport function useMapEvent(type, handler) {\n    const map = useMap();\n    useEffect(function addMapEventHandler() {\n        // @ts-ignore event type\n        map.on(type, handler);\n        return function removeMapEventHandler() {\n            // @ts-ignore event type\n            map.off(type, handler);\n        };\n    }, [\n        map,\n        type,\n        handler\n    ]);\n    return map;\n}\nexport function useMapEvents(handlers) {\n    const map = useMap();\n    useEffect(function addMapEventHandlers() {\n        map.on(handlers);\n        return function removeMapEventHandlers() {\n            map.off(handlers);\n        };\n    }, [\n        map,\n        handlers\n    ]);\n    return map;\n}\n"],"names":["CustomTile","_jsx","TileLayer","attribution","url","_jsxs","children","SetViewOnClick","_ref","animateRef","map","useMapEvent","e","setView","latlng","getZoom","animate","current","useRef","_Fragment","type","onChange","MapContainer","center","zoom","scrollWheelZoom","placeholder","MapPlaceholder","useMap","useLeafletContext","handler","useEffect","on","off","useMapEvents","handlers"],"sourceRoot":""}